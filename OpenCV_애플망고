from google.colab import drive
drive.mount('/content/drive')

import cv2
import numpy as np
from matplotlib import pyplot as plt

____________________________________________________________________________________________________

# 병징 색상 분석
def analyze_disease_color_stats(disease_only_rgb, disease_mask) :

    # 병징 픽셀만 추출 (H x W x 3) -> (N x 3)
    masked_pixels = disease_only_rgb[disease_mask == 255]
    if masked_pixels.size == 0 :
        print("병징 픽셀이 없어 색상 분석 불가능")
        return None, None

    # RGB -> LAB
    lab_pixels = cv2.cvtColor(masked_pixels.reshape(-1, 1, 3), cv2.COLOR_RGB2LAB).reshape(-1, 3)
    L_vals, A_vals, B_vals = lab_pixels[:, 0], lab_pixels[:, 1], lab_pixels[:, 2]

    stats = {
        "L_mean": float(np.mean(L_vals)),
        "L_std":  float(np.std(L_vals)),
        "A_mean": float(np.mean(A_vals)),
        "A_std":  float(np.std(A_vals)),
        "B_mean": float(np.mean(B_vals)),
        "B_std":  float(np.std(B_vals)),
    }

    # 진행 정도
    L_brightness = stats["L_mean"]
    L_variation  = stats["L_std"]

    if L_brightness > 170 :
        stage = "매우 밝음 (초기 or 비병징 가능성)"
    elif L_brightness > 130 :
        stage = "중간 밝기 (병의 초기 진행 가능성)"
    elif L_brightness > 90 :
        stage = "다소 어두움 (병징이 어느 정도 진행됨)"
    else :
        stage = "어두운 병징 (후기 or 심화 추정)"

    variation_note = "균일함" if L_variation < 10 else "색상 범위가 다양함"

    analysis_text = (
        f"- 평균 밝기 (L) : {L_brightness:.1f} → {stage}\n"
        f"- 밝기 분산 : {L_variation:.1f} → {variation_note}\n"
        f"- LAB 평균 색상(참고) a* : {stats['A_mean']:.1f}, b*: {stats['B_mean']:.1f}\n"
    )

    return analysis_text, stats

# =========================================

# 이미지 경로
image_path = "/content/drive/MyDrive/Colab/ACK2025/mango/OpenCV_data/B_3.JPG"

# 이미지 불러오기 (BGR)
img = cv2.imread(image_path)
if img is None :
    raise FileNotFoundError(f"이미지 불러오기 실패 : {image_path}")

# 원본 복사용
vis_bgr = img.copy()

# GrabCut으로 과실 전체 추출
mask = np.zeros(img.shape[:2], np.uint8)
bgdModel = np.zeros((1, 65), np.float64)
fgdModel = np.zeros((1, 65), np.float64)

height, width = img.shape[:2]
margin_x = int(width * 0.01)
margin_y = int(height * 0.03)
rect = (margin_x, margin_y, width - 2 * margin_x, height - 2 * margin_y)

cv2.grabCut(img, mask, rect, bgdModel, fgdModel, 5, cv2.GC_INIT_WITH_RECT)

# GrabCut 결과 : 1,3(전경)만 남기고 0,2(배경)는 제거
mask2 = np.where((mask == 2) | (mask == 0), 0, 1).astype("uint8")  # 과실영역 = 1

# 과실만 남긴 BGR 이미지
fruit_only_bgr = img * mask2[:, :, np.newaxis]

# 과실 영역 HSV 변환 (BGR→HSV)
hsv_fruit = cv2.cvtColor(fruit_only_bgr, cv2.COLOR_BGR2HSV)

# 병징 색상 범위 정의 후 병징 마스크 생성
lower_black = np.array([0, 0, 0], dtype=np.uint8)
upper_black = np.array([180, 255, 40], dtype=np.uint8)

lower_brown = np.array([10, 100, 30], dtype=np.uint8)
upper_brown = np.array([20, 255, 160], dtype=np.uint8)

mask_black = cv2.inRange(hsv_fruit, lower_black, upper_black)
mask_brown = cv2.inRange(hsv_fruit, lower_brown, upper_brown)
disease_mask = cv2.bitwise_or(mask_black, mask_brown)  # 0/255 단일 채널

fruit_mask_u8 = (mask2 * 255).astype(np.uint8)
disease_mask = cv2.bitwise_and(disease_mask, fruit_mask_u8)

# 병징률(%) 계산 : 과실 전체 픽셀 대비 병징 픽셀
fruit_mask = (mask2 == 1).astype(np.uint8)  # 과실 이진 마스크(1/0)
total_pixels   = int(cv2.countNonZero(fruit_mask))
disease_pixels = int(cv2.countNonZero(disease_mask))
disease_ratio  = (disease_pixels / total_pixels * 100.0) if total_pixels > 0 else 0.0

# 심각도 판별 (4단계)
if disease_ratio < 1 :
    severity = "Very Mild"
elif disease_ratio < 5 :
    severity = "Mild"
elif disease_ratio < 15 :
    severity = "Moderate"
else :
    severity = "Severe"

# 병징 영역 색상 분석 (LAB) (disease_only는 RGB로 전달)
disease_only_bgr = cv2.bitwise_and(fruit_only_bgr, fruit_only_bgr, mask=disease_mask)
disease_only_rgb = cv2.cvtColor(disease_only_bgr, cv2.COLOR_BGR2RGB)
analysis_text, stats = analyze_disease_color_stats(disease_only_rgb, disease_mask)

# 최종 오버레이 이미지 생성
# 과실 윤곽(파란색), 병징 윤곽(빨간색) → 원본 위에 그리기
overlay = vis_bgr.copy()

# 과실 외곽선
contours_fruit, _ = cv2.findContours(fruit_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cv2.drawContours(overlay, contours_fruit, -1, (255, 0, 0), 2)  # Blue (BGR)

# 병징 외곽선
contours_disease, _ = cv2.findContours(disease_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cv2.drawContours(overlay, contours_disease, -1, (0, 0, 255), 2)  # Red (BGR)

# 결과 출력
print("\n[병징 색상 분석 결과]")
if analysis_text :
    print(analysis_text.strip())
else :
    print("병징 픽셀이 없어 색상 분석 불가능")

print("[카운트/비율/판정]")
print(f"- 총 과실 픽셀 수 : {total_pixels}")
print(f"- 병징 픽셀 수   : {disease_pixels}")
print(f"- 병징률         : {disease_ratio:.2f}%")
print(f"- 심각도 판단    : {severity}")

# 결과 이미지 보기 (Colab/OpenCV)
# Colab이면 cv2_imshow, 로컬이면 cv2.imshow 사용
try :
    from google.colab.patches import cv2_imshow
    cv2_imshow(overlay)  # 최종 결과(윤곽 오버레이)
except Exception :
    # 로컬 실행
    cv2.imshow("Overlay (Fruit=Blue, Disease=Red)", overlay)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

____________________________________________________________________________________________________

# 이미지 불러오기
img = cv2.imread("/content/drive/MyDrive/Colab/ACK2025/mango/OpenCV_data/N_3.JPG")
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# GrabCut으로 과실 전체 추출
mask = np.zeros(img.shape[:2], np.uint8)
bgdModel = np.zeros((1, 65), np.float64)
fgdModel = np.zeros((1, 65), np.float64)

height, width = img.shape[:2]
margin_x = int(width * 0.04)
margin_y = int(height * 0.03)
rect = (margin_x, margin_y, width - 2 * margin_x, height - 2 * margin_y)

cv2.grabCut(img, mask, rect, bgdModel, fgdModel, 5, cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask == 2) | (mask == 0), 0, 1).astype('uint8')
fruit_only = img_rgb * mask2[:, :, np.newaxis]

# 과실 영역 마스크 생성
fruit_mask = np.any(fruit_only != 0, axis=-1).astype(np.uint8)

# LAB 색공간 변환 후 과실 영역의 평균 색상 분석
masked_pixels = fruit_only[fruit_mask == 1]
lab_pixels = cv2.cvtColor(masked_pixels.reshape(-1,1,3), cv2.COLOR_RGB2LAB).reshape(-1,3)

L_mean = np.mean(lab_pixels[:, 0])
A_mean = np.mean(lab_pixels[:, 1])
B_mean = np.mean(lab_pixels[:, 2])

# 숙성도 판별 (기준은 실험적으로 조정할 수 있음)
if L_mean >= 170 and A_mean < 130 and B_mean > 140 :
    maturity = "Immature" # 미숙 (연녹색 또는 황록색)
elif 150 <= L_mean < 170 and 135 <= A_mean <= 150 and 125 <= B_mean <= 130 :
    maturity = "Mature" # 중간 숙성 (황색 바탕에 붉은기 시작, 오렌지~핑크톤)
elif L_mean < 150 and A_mean > 150 and B_mean > 140 :
    maturity = "Ripe" # 완숙 (선명한 붉은색 + 황금색)
else :
    maturity = "Uncertain"

# 결과 출력
print("[숙성도 분석 결과]")
print(f"- 평균 L값 (밝기) : {L_mean:.1f}")
print(f"- 평균 a*값 (녹→적) : {A_mean:.1f}")
print(f"- 평균 b*값 (청→황) : {B_mean:.1f}")
print(f"- 숙성도 판단 : {maturity}")

# 시각화
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.title("Original")
plt.imshow(img_rgb)
plt.axis("off")

plt.subplot(1, 2, 2)
plt.title(f"Fruit _ Maturity : {maturity}")
plt.imshow(fruit_only)
plt.axis("off")
plt.tight_layout()
plt.show()
