# 모델 불러오기
def load_model(checkpoint_path, num_classes, device) :
    # Faster R-CNN (ResNet50 + FPN) 모델 로드하고 출력층만 교체
    model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=False)
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    # 클래스 수에 맞게 box predictor 수정
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # 학습된 가중치 로드
    checkpoint = torch.load(checkpoint_path, map_location=device)
    model.load_state_dict(checkpoint["model_state_dict"])
    model.to(device)
    model.eval()
    return model

# 이미지 전처리 (PIL 이미지 → 텐서 변환)
def preprocess_image(image_path) :
    image = Image.open(image_path).convert("RGB") # RGB 모드로 열기
    transform = T.Compose([
        T.ToTensor()
    ])
    return transform(image), image

# 시각화 (박스, 라벨, 스코어 표시)
def visualize_prediction(original_image, boxes, labels, scores, class_names, threshold=0.5) :
    fig, ax = plt.subplots(1, figsize=(12, 8))
    ax.imshow(original_image)

    # 예측된 객체 하나하나 시각화
    for box, label, score in zip(boxes, labels, scores) :
        if score >= threshold : # 신뢰도 임계값 이상만 표시
            xmin, ymin, xmax, ymax = box
            rect = patches.Rectangle((xmin, ymin), xmax - xmin, ymax - ymin,
                                     linewidth=2, edgecolor='r', facecolor='none')
            ax.add_patch(rect)
            # 클래스명 + 확률 표시
            text = f"{class_names[label]}: {score:.2f}"
            ax.text(xmin, ymin - 5, text, color='white',
                    bbox=dict(facecolor='red', alpha=0.5))
    plt.axis('off')
    plt.show()

# 실행
if __name__ == "__main__" :

    image_path = "/content/drive/MyDrive/Colab/ACK2025/olive/anthracnose.JPG"  # 대상 이미지 경로
    checkpoint_path = "/content/drive/MyDrive/Colab/ACK2025/olive/model/250703_epoch_7.pth"
    num_classes = 3  # 클래스 개수 (배경 포함됨) (바로 아래줄 __background__ 보이쥬?)
    class_names = ["__background__", "olive", "anthracnose"]
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # 모델 추론
    model = load_model(checkpoint_path, num_classes, device)
    img_tensor, img_pil = preprocess_image(image_path)
    with torch.no_grad() :
        prediction = model([img_tensor.to(device)])[0] # 배치로 넣어야 하므로 리스트로 감싸

    # 결과 시각화
    visualize_prediction(
        img_pil,
        prediction["boxes"].cpu(),
        prediction["labels"].cpu(),
        prediction["scores"].cpu(),
        class_names,
        threshold=0.5 # 신뢰도 0.5 이상만 표시
    ) 

____________________________________________________________________________________________________

# PR 커브 시각화
# 모델 불러오
def get_model(num_classes, checkpoint_path, device) :
    # Faster R-CNN 정의
    model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=False)
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # 체크포인트에서 가중치 로드
    checkpoint = torch.load(checkpoint_path, map_location=device)
    model.load_state_dict(checkpoint["model_state_dict"])
    model.to(device)
    model.eval()
    return model

# PR 커브 평가용 (IoU@50 기준으로 TP/FP 판단)
def evaluate_for_pr_curve(model, data_loader, device, iou_thresh=0.5) :
    model.eval()
    all_scores = [] # 예측 확률 (score)
    all_true_labels = []  # 1 : TP, 0 : FP

    with torch.no_grad() :
        for images, targets in tqdm(data_loader, desc="Evaluating for PR Curve") :
            images = [img.to(device) for img in images]
            outputs = model(images)

            for output, target in zip(outputs, targets) :
                pred_boxes = output['boxes'].cpu()
                pred_scores = output['scores'].cpu().numpy()
                gt_boxes = target['boxes'].cpu()

                # 예측된 박스가 없으면 스킵
                if len(pred_boxes) == 0 :
                    continue

                # GT가 아예 없는 경우 → 모든 예측은 FP
                if len(gt_boxes) == 0 :
                    tp_fp = [0] * len(pred_boxes)
                else :
                    # 예측 박스와 GT 박스 간 IoU 계산
                    ious = box_iou(pred_boxes, gt_boxes)
                    max_ious, _ = ious.max(dim=1)
                    # IoU가 threshold 이상이면 TP, 아니면 FP
                    tp_fp = (max_ious >= iou_thresh).numpy().astype(int)

                # 스코어와 TP/FP 레이블 저장
                all_scores.extend(pred_scores)
                all_true_labels.extend(tp_fp)

    return np.array(all_true_labels), np.array(all_scores)

# PR 커브 시각화
def plot_pr_curve(y_true, y_scores, iou_thresh) :
    # PR 곡선 계산
    precision, recall, _ = precision_recall_curve(y_true, y_scores)
    ap = average_precision_score(y_true, y_scores)

    plt.figure(figsize=(8, 6))
    plt.plot(recall, precision, marker='.')
    plt.xlabel("Recall")
    plt.ylabel("Precision")
    plt.title(f"PR Curve @ IoU {int(iou_thresh*100)} (AP: {ap:.4f})")
    plt.grid(True)
    plt.show()

# 예시 실행
if __name__ == "__main__" :
    # 디바이스 설정
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    checkpoint_path = "/content/drive/MyDrive/Colab/ACK2025/olive/model/250703_epoch_7.pth"
    num_classes = 3

    # 모델 불러오기
    model = get_model(num_classes, checkpoint_path, device)

    # 테스트셋 기반 PR 곡선 평가 (IoU@0.5 기준)
    y_true, y_scores = evaluate_for_pr_curve(model, test_loader, device, iou_thresh=0.5)
    plot_pr_curve(y_true, y_scores, iou_thresh=0.5)
